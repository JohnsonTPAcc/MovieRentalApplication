@page "/Movies/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using MovieRentalApplication.Shared.Domain

<h3 class="card-title">Movies</h3>
@if (Movies == null)
{
    <div class="alert alert-info">Loading Movies...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Director</th>
                <th>Category</th>
                <th>Rating</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in Movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.Description</td>
                    <td>@(movie.Director?.Name ?? "Unknown")</td>
                    <td>@(movie.Category?.Name ?? "Unknown")</td>
                    <td>@(movie.Rating?.Name ?? "Unrated")</td>
                    <td>
                        <a href="/Movies/view/@movie.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Movies/edit/@movie.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" onclick="@(()=>Delete(movie.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Movie>? Movies;

    protected async override Task OnInitializedAsync()
    {
        Movies = await _client.GetFromJsonAsync<List<Movie>>($"{Endpoints.MoviesEndpoint}");
    }

    async Task Delete(int movieId)
    {
        if (Movies != null)
        {
            var movie = Movies.FirstOrDefault(m => m.Id == movieId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete the movie titled '{movie.Title}'?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.MoviesEndpoint}/{movieId}");
                await OnInitializedAsync();
            }
        }
    }
}
