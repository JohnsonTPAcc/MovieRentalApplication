@page "/Bookings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using MovieRentalApplication.Shared.Domain

<h3 class="card-title">Bookings</h3>
<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
<br />
@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Date Out</th>
                <th>Date In</th>
                <th>Movie Title</th>
                <th>Customer Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.DateOut.ToShortDateString()</td>
                    <td>@(booking.DateIn.HasValue ? booking.DateIn.Value.ToShortDateString() : "N/A")</td>
                    <td>@(booking.Movie?.Title ?? "Unknown")</td>
                    <td>@(booking.Customer?.FirstName ?? "Unknown")</td>
                    <td>
                        <a href="/Bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" onclick="@(() => Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Booking>? Bookings;

    protected async override Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    async Task Delete(int bookingId)
    {
        if (Bookings != null)
        {
            var booking = Bookings.FirstOrDefault(b => b.Id == bookingId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this booking for '{booking.Movie?.Title}'?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
                await OnInitializedAsync();
            }
        }
    }
}
