@page "/bookings"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using MovieRentalApplication.Shared.Domain
@using MovieRentalApplication.Client.Static

<h3 class="card-title">Movie Bookings</h3>
<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span> Create New Booking
</a>

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else if (Bookings.Count == 0)
{
    <div class="alert alert-info">No bookings available.</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Date Out</th>
                <th>Date In</th>
                <th>Movie</th>
                <th>Customer</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.DateOut.ToString("yyyy-MM-dd")</td>
                    <td>@(booking.DateIn.HasValue ? booking.DateIn.Value.ToString("yyyy-MM-dd") : "To Be Determined")</td>
                    <td>@booking.MovieTitle</td>
                    <td>@booking.CustomerFullName</td>
                    <td>
                        <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span> View
                        </a>
                        <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span> Edit
                        </a>
                        <button class="btn btn-danger" @onclick="() => Delete(booking.Id)">
                            <span class="oi oi-delete"></span> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookingViewModel>? Bookings;

    protected override async Task OnInitializedAsync()
    {
        await FetchBookings();
    }

    private async Task FetchBookings()
    {
        Bookings = await _client.GetFromJsonAsync<List<BookingViewModel>>(Endpoints.BookingsEndpoint);
        StateHasChanged();
    }

    async Task Delete(int bookingId)
    {
        var bookingToDelete = Bookings?.FirstOrDefault(b => b.Id == bookingId);
        if (bookingToDelete != null)
        {
            var confirmMessage = $"Are you sure you want to delete the booking for '{bookingToDelete.MovieTitle}'?";
            var confirm = await js.InvokeAsync<bool>("confirm", confirmMessage);
            if (confirm)
            {
                var response = await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
                if (response.IsSuccessStatusCode)
                {
                    Bookings.Remove(bookingToDelete);
                    StateHasChanged(); // Update the UI
                }
                else
                {
                    // Handle errors here, such as displaying an error message
                }
            }
        }
    }

    public class BookingViewModel
    {
        public int Id { get; set; }
        public DateTime DateOut { get; set; }
        public DateTime? DateIn { get; set; }
        public string MovieTitle { get; set; }
        public string CustomerFullName { get; set; }
        // You can add other properties that you need for your view
    }
}
