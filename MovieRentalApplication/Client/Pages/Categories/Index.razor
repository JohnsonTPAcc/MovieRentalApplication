@page "/Categories/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using MovieRentalApplication.Shared.Domain

<h3 class="card-title">Movie Categories</h3>
<a href="/categories/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Categories
</a>
@if (Categories == null)
{
    <div class="alert alert-info">Loading Categories...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Category in Categories)
            {
                <tr>
                    <td>@Category.Name</td>
                    <td>
                        <a href="/Categories/view/@Category.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Categories/edit/@Category.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" onclick="@(()=>Delete(Category.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Category>? Categories;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoryEndpoint}");
    }

    async Task Delete(int CategoryId)
    {
        if (Categories != null)
        {
            var Category = Categories.FirstOrDefault(d => d.Id == CategoryId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Category.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.CategoryEndpoint}/{CategoryId}");
                await OnInitializedAsync();
            }
        }
    }
}