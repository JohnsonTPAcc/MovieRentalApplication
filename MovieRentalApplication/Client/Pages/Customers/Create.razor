@page "/customers/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Customer</h3>
<hr />
<br />

<EditForm Model="@customer" OnValidSubmit="CreateCustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name:</label>
        <InputText @bind-Value="customer.FirstName" class="form-control" />
        <ValidationMessage For="@(() => customer.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name:</label>
        <InputText @bind-Value="customer.LastName" class="form-control" />
        <ValidationMessage For="@(() => customer.LastName)" />
    </div>

    <div class="form-group">
        <label>Contact Number:</label>
        <InputText @bind-Value="customer.ContactNumber" class="form-control" />
        <ValidationMessage For="@(() => customer.ContactNumber)" />
    </div>

    <div class="form-group">
        <label>Email Address:</label>
        <InputText @bind-Value="customer.EmailAddress" class="form-control" />
        <ValidationMessage For="@(() => customer.EmailAddress)" />
    </div>

    <div class="form-group">
        <label>Address:</label>
        <InputTextArea @bind-Value="customer.Address" class="form-control" />
        <ValidationMessage For="@(() => customer.Address)" />
    </div>

    <button type="submit" class="btn btn-success">Create</button>
</EditForm>

@code {
    private Customer customer = new Customer();

    private async Task CreateCustomer()
    {
        var response = await _client.PostAsJsonAsync(Endpoints.CustomersEndpoint, customer);

        if (response.IsSuccessStatusCode)
        {
            _navManager.NavigateTo("/customers");
        }
        else
        {
            // Handle the error (e.g., show an error message)
        }
    }
}
